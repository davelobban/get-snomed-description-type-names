// <auto-generated />
// at: https://app.quicktype.io/#l=cs&r=json2csharp
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using QuickType;
//
//    var welcome = Welcome.FromJson(jsonString);

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace GetSnomedRelationships.Model
{
    public class Concept
{
    

        [JsonPropertyName("conceptId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ConceptId { get; set; }

        [JsonPropertyName("fsn")]
        public Fsn Fsn { get; set; }

        [JsonPropertyName("pt")]
        public Fsn Pt { get; set; }

        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("effectiveTime")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long EffectiveTime { get; set; }

        [JsonPropertyName("released")]
        public bool Released { get; set; }

        [JsonPropertyName("releasedEffectiveTime")]
        public long ReleasedEffectiveTime { get; set; }

        [JsonPropertyName("moduleId")]
        public string ModuleId { get; set; }

        [JsonPropertyName("definitionStatus")]
        public string DefinitionStatus { get; set; }

        [JsonPropertyName("descriptions")]
        public Description[] Descriptions { get; set; }

        [JsonPropertyName("classAxioms")]
        public ClassAxiom[] ClassAxioms { get; set; }

        [JsonPropertyName("gciAxioms")]
        public object[] GciAxioms { get; set; }

        [JsonPropertyName("relationships")]
        public WelcomeRelationship[] Relationships { get; set; }
    }

    public partial class ClassAxiom
    {
        [JsonPropertyName("axiomId")]
        public Guid AxiomId { get; set; }

        [JsonPropertyName("moduleId")]
        public string ModuleId { get; set; }

        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("released")]
        public bool Released { get; set; }

        [JsonPropertyName("definitionStatusId")]
        public string DefinitionStatusId { get; set; }

        [JsonPropertyName("relationships")]
        public ClassAxiomRelationship[] Relationships { get; set; }

        [JsonPropertyName("definitionStatus")]
        public string DefinitionStatus { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        [JsonPropertyName("effectiveTime")]
        public long EffectiveTime { get; set; }
    }

    public partial class ClassAxiomRelationship
    {
        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("released")]
        public bool Released { get; set; }

        [JsonPropertyName("moduleId")]
        public string ModuleId { get; set; }

        [JsonPropertyName("sourceId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SourceId { get; set; }

        [JsonPropertyName("destinationId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DestinationId { get; set; }

        [JsonPropertyName("typeId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TypeId { get; set; }

        [JsonPropertyName("type")]
        public Target Type { get; set; }

        [JsonPropertyName("target")]
        public Target Target { get; set; }

        [JsonPropertyName("groupId")]
        public long GroupId { get; set; }

        [JsonPropertyName("modifier")]
        public string Modifier { get; set; }

        [JsonPropertyName("characteristicType")]
        public string CharacteristicType { get; set; }
    }

    public partial class Target
    {
        [JsonPropertyName("conceptId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ConceptId { get; set; }

        [JsonPropertyName("fsn")]
        public Fsn Fsn { get; set; }

        [JsonPropertyName("definitionStatus")]
        public string DefinitionStatus { get; set; }

        [JsonPropertyName("pt")]
        public Fsn Pt { get; set; }

        [JsonPropertyName("id")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Id { get; set; }
    }

    public partial class Fsn
    {
        [JsonPropertyName("term")]
        public string Term { get; set; }

        [JsonPropertyName("lang")]
        public Lang Lang { get; set; }
    }

    public partial class Description
    {
        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("released")]
        public bool Released { get; set; }

        [JsonPropertyName("releasedEffectiveTime")]
        public long ReleasedEffectiveTime { get; set; }

        [JsonPropertyName("descriptionId")]
        public string DescriptionId { get; set; }

        [JsonPropertyName("term")]
        public string Term { get; set; }

        [JsonPropertyName("conceptId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ConceptId { get; set; }

        [JsonPropertyName("moduleId")]
        public string ModuleId { get; set; }

        [JsonPropertyName("typeId")]
        public string TypeId { get; set; }

        [JsonPropertyName("acceptabilityMap")]
        public Dictionary<string, string> AcceptabilityMap { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("caseSignificance")]
        public string CaseSignificance { get; set; }

        [JsonPropertyName("lang")]
        public Lang Lang { get; set; }

        [JsonPropertyName("effectiveTime")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long EffectiveTime { get; set; }
    }

    public partial class WelcomeRelationship
    {
        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("released")]
        public bool Released { get; set; }

        [JsonPropertyName("releasedEffectiveTime")]
        public long ReleasedEffectiveTime { get; set; }

        [JsonPropertyName("relationshipId")]
        public string RelationshipId { get; set; }

        [JsonPropertyName("moduleId")]
        public string ModuleId { get; set; }

        [JsonPropertyName("sourceId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long SourceId { get; set; }

        [JsonPropertyName("destinationId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long DestinationId { get; set; }

        [JsonPropertyName("typeId")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long TypeId { get; set; }

        [JsonPropertyName("type")]
        public Target Type { get; set; }

        [JsonPropertyName("target")]
        public Target Target { get; set; }

        [JsonPropertyName("groupId")]
        public long GroupId { get; set; }

        [JsonPropertyName("modifier")]
        public string Modifier { get; set; }

        [JsonPropertyName("characteristicType")]
        public string CharacteristicType { get; set; }

        [JsonPropertyName("effectiveTime")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long EffectiveTime { get; set; }

        [JsonPropertyName("id")]
        public string Id { get; set; }
    }

    public enum Lang { En };

    public partial class Welcome
    {
        public static Welcome FromJson(string json) => JsonConvert.DeserializeObject<Welcome>(json, QuickType.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this Welcome self) => JsonConvert.SerializeObject(self, QuickType.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                LangConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }

    internal class LangConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(Lang) || t == typeof(Lang?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "en")
            {
                return Lang.En;
            }
            throw new Exception("Cannot unmarshal type Lang");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (Lang)untypedValue;
            if (value == Lang.En)
            {
                serializer.Serialize(writer, "en");
                return;
            }
            throw new Exception("Cannot marshal type Lang");
        }

        public static readonly LangConverter Singleton = new LangConverter();
    }
}
