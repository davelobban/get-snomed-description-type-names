// <auto-generated />
// at: https://app.quicktype.io/#l=cs&r=json2csharp
//

using System;
using System.Collections.Generic;
using System.Text.Json.Serialization;

namespace GetSnomedRelationships.Model
{
    public partial class Concept
    {
        //Some properties commented out as too much effort to deserialise and not needed to get the descriptions

        private long _conceptId;

        // ReSharper disable once UnusedMember.Global
        // This *is* used, for deserialisation
        [JsonPropertyName("conceptId")]
        public string ConceptIdAsString
        {
            set { long.TryParse(value, out _conceptId); }
        }
        public long ConceptId
        {
            get => _conceptId;
            set => _conceptId = value;
        }

        [JsonPropertyName("fsn")]
        public Fsn Fsn { get; set; }

        [JsonPropertyName("pt")]
        public Fsn Pt { get; set; }

        [JsonPropertyName("active")]
        public bool Active { get; set; }

        //[JsonPropertyName("effectiveTime")]
        //public long EffectiveTime { get; set; }

        [JsonPropertyName("released")]
        public bool Released { get; set; }

        //[JsonPropertyName("releasedEffectiveTime")]
        //public long ReleasedEffectiveTime { get; set; }

        [JsonPropertyName("moduleId")]
        public string ModuleId { get; set; }

        [JsonPropertyName("definitionStatus")]
        public string DefinitionStatus { get; set; }

        [JsonPropertyName("descriptions")]
        public Description[] Descriptions { get; set; }

        //[JsonPropertyName("classAxioms")]
        //public ClassAxiom[] ClassAxioms { get; set; }

        //[JsonPropertyName("gciAxioms")]
        //public object[] GciAxioms { get; set; }

        //[JsonPropertyName("relationships")]
        //public ConceptRelationship[] Relationships { get; set; }
    }

    public partial class ClassAxiom
    {
        [JsonPropertyName("axiomId")]
        public Guid AxiomId { get; set; }

        [JsonPropertyName("moduleId")]
        public string ModuleId { get; set; }

        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("released")]
        public bool Released { get; set; }

        [JsonPropertyName("definitionStatusId")]
        public string DefinitionStatusId { get; set; }

        [JsonPropertyName("relationships")]
        public ClassAxiomRelationship[] Relationships { get; set; }

        [JsonPropertyName("definitionStatus")]
        public string DefinitionStatus { get; set; }

        [JsonPropertyName("id")]
        public Guid Id { get; set; }

        //[JsonPropertyName("effectiveTime")]
        //public long EffectiveTime { get; set; }
    }

    public partial class ClassAxiomRelationship
    {
        private long _sourceId;
        private long _destinationId;
        private long _typeId;

        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("released")]
        public bool Released { get; set; }

        [JsonPropertyName("moduleId")]
        public string ModuleId { get; set; }

        // ReSharper disable once UnusedMember.Global
        // This *is* used, for deserialisation
        [JsonPropertyName("sourceId")]
        public string SourceIdAsString
        {
            set { long.TryParse(value, out _sourceId); }
        }
        public long SourceId
        {
            get => _sourceId;
            set => _sourceId = value;
        }

        // ReSharper disable once UnusedMember.Global
        // This *is* used, for deserialisation
        [JsonPropertyName("destinationId")]
        public string DestinationIdAsString
        {
            set { long.TryParse(value, out _destinationId); }
        }

        public long DestinationId
        {
            get => _destinationId;
            set => _destinationId = value;
        }

        // ReSharper disable once UnusedMember.Global
        // This *is* used, for deserialisation
        [JsonPropertyName("typeId")]
        public string TypeIdAsString
        {
            set { long.TryParse(value, out _typeId); }
        }
        public long TypeId
        {
            get => _typeId;
            set => _typeId = value;
        }

        [JsonPropertyName("type")]
        public Target Type { get; set; }

        [JsonPropertyName("target")]
        public Target Target { get; set; }

        //[JsonPropertyName("groupId")]
        //public long GroupId { get; set; }

        [JsonPropertyName("modifier")]
        public string Modifier { get; set; }

        [JsonPropertyName("characteristicType")]
        public string CharacteristicType { get; set; }
    }

    public partial class Target
    {
        private long _conceptId;

        // ReSharper disable once UnusedMember.Global
        // This *is* used, for deserialisation
        [JsonPropertyName("conceptId")]
        public string ConceptIdAsString
        {
            set { long.TryParse(value, out _conceptId); }
        }
        public long ConceptId
        {
            get => _conceptId;
            set => _conceptId = value;
        }

        [JsonPropertyName("fsn")]
        public Fsn Fsn { get; set; }

        [JsonPropertyName("definitionStatus")]
        public string DefinitionStatus { get; set; }

        [JsonPropertyName("pt")]
        public Fsn Pt { get; set; }

        private long _id;

        // ReSharper disable once UnusedMember.Global
        // This *is* used, for deserialisation
        [JsonPropertyName("Id")]
        public string IdAsString
        {
            set { long.TryParse(value, out _id); }
        }
        public long Id
        {
            get => _id;
            set => _id = value;
        }
    }

    public partial class Fsn
    {
        [JsonPropertyName("term")]
        public string Term { get; set; }

        //[JsonPropertyName("lang")]
        //public Lang Lang { get; set; }
    }

    public partial class Description
    {
        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("released")]
        public bool Released { get; set; }

        //[JsonPropertyName("releasedEffectiveTime")]
        //public long ReleasedEffectiveTime { get; set; }

        [JsonPropertyName("descriptionId")]
        public string DescriptionId { get; set; }

        [JsonPropertyName("term")]
        public string Term { get; set; }

        private long _conceptId;
        // ReSharper disable once UnusedMember.Global
        // This *is* used, for deserialisation
        [JsonPropertyName("conceptId")]
        public string ConceptIdAsString
        {
            set { long.TryParse(value, out _conceptId); }
        }
        public long ConceptId
        {
            get => _conceptId;
            set => _conceptId = value;
        }

        [JsonPropertyName("moduleId")]
        public string ModuleId { get; set; }

        [JsonPropertyName("typeId")]
        public string TypeId { get; set; }

        [JsonPropertyName("acceptabilityMap")]
        public Dictionary<string, string> AcceptabilityMap { get; set; }

        [JsonPropertyName("type")]
        public string Type { get; set; }

        [JsonPropertyName("caseSignificance")]
        public string CaseSignificance { get; set; }

        //[JsonPropertyName("lang")]
        //public Lang Lang { get; set; }

        //[JsonPropertyName("effectiveTime")]
        //public long EffectiveTime { get; set; }
    }

    public partial class ConceptRelationship
    {
        [JsonPropertyName("active")]
        public bool Active { get; set; }

        [JsonPropertyName("released")]
        public bool Released { get; set; }

        [JsonPropertyName("releasedEffectiveTime")]
        public long ReleasedEffectiveTime { get; set; }

        [JsonPropertyName("relationshipId")]
        public string RelationshipId { get; set; }

        [JsonPropertyName("moduleId")]
        public string ModuleId { get; set; }

        private long _sourceId;
        // ReSharper disable once UnusedMember.Global
        // This *is* used, for deserialisation
        [JsonPropertyName("sourceId")]
        public string SourceIdAsString
        {
            set { long.TryParse(value, out _sourceId); }
        }
        public long SourceId
        {
            get => _sourceId;
            set => _sourceId = value;
        }

        private long _destinationId;
        // ReSharper disable once UnusedMember.Global
        // This *is* used, for deserialisation
        [JsonPropertyName("destinationId")]
        public string DestinationIdAsString
        {
            set { long.TryParse(value, out _destinationId); }
        }
        public long DestinationId
        {
            get => _destinationId;
            set => _destinationId = value;
        }

        //[JsonPropertyName("typeId")]
        //public long TypeId { get; set; }

        [JsonPropertyName("type")]
        public Target Type { get; set; }

        [JsonPropertyName("target")]
        public Target Target { get; set; }

        //[JsonPropertyName("groupId")]
        //public long GroupId { get; set; }

        [JsonPropertyName("modifier")]
        public string Modifier { get; set; }

        [JsonPropertyName("characteristicType")]
        public string CharacteristicType { get; set; }

        //[JsonPropertyName("effectiveTime")]
        //public long EffectiveTime { get; set; }

        [JsonPropertyName("id")]
        public string Id { get; set; }
    }

    public enum Lang { en }; 


}






